# file opened: C:\Users\USER\Documents\Github\Mastermind\mastermind.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000                      org $8000               ; Program starts from $8000 = 32768
  3   8000
  4   8000 0E 0F        start:  ld C, %00001111;
  5   8002 3E 01                ld A, 1
  6   8004 D3 FE                out ($FE), A ;Blue border
  7   8006 21 00 58             ld HL, $5800
  8   8009 11 00 03             ld DE, 768
  9   800C 71           loop1:  ld (HL), C ; loop that prints all the screen with blue
 10   800D 23                   inc HL
 11   800E 1B                   dec DE
 12   800F 7A                   ld A, D
 13   8010 B3                   or E
 14   8011 20 F9                jr NZ, loop1 ; end of the loop that prints in blue
 15   8013
 16   8013 06 04                ld B, 4
 17   8015 0E 07                ld C, 7
 18   8017 3E 8D                ld a, %10001101 ; blink property whith cian to the first arrow
 19   8019 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
 20   801C
 21   801C
 22   801C
 23   801C 06 00                ld B, 0
 24   801E 0E 00                ld C, 0
 25   8020 3E 89                ld a, %10001001 ; blue with blue background to dont show win or loose when restart
 26   8022 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
 27   8025 0C                   inc C
 28   8026 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
 29   8029 0C                   inc C
 30   802A CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
 31   802D
 32   802D 21 0A 58             ld HL, $580A ; Aims to the first square where is going to print "MASTER MIND"
 33   8030 0E 0A                ld C, %00001010
 34   8032 06 0B                ld B,11
 35   8034 71           increment: ld (HL), C
 36   8035 23                   inc HL
 37   8036 10 FC                djnz increment
 38   8038
 39   8038 21 0A 40             ld HL, $400A
 40   803B CD F3 84             call print_title ; prints the title of the game
 41   803E 21 80 40             ld HL, $4080
 42   8041 CD 48 83             call print_line1 ; print the line of arrows
 43   8044 21 C0 40             ld HL, $40C0
 44   8047 CD 6E 83             call print_line2 ; print the line of dots
 45   804A 21 00 48             ld HL, $4800
 46   804D CD 6E 83             call print_line2
 47   8050 21 40 48             ld HL, $4840
 48   8053 CD 6E 83             call print_line2
 49   8056 21 80 48             ld HL, $4880
 50   8059 CD 6E 83             call print_line2
 51   805C 21 00 50             ld HL, $5000
 52   805F CD 94 83             call print_line3 ; prints the line of xs
 53   8062 21 40 50             ld HL, $5040
 54   8065 CD 94 83             call print_line3
 55   8068 21 80 50             ld HL, $5080
 56   806B CD 94 83             call print_line3
 57   806E 21 C0 50             ld HL, $50C0
 58   8071 CD 94 83             call print_line3
 59   8074
 60   8074                      ; end of printing the screen, is ready to start playing
 61   8074
 62   8074                      ;call generate_key
 63   8074
 64   8074
 65   8074 06 06                ld B, 6
 66   8076 0E 07                ld C, 7
 67   8078 3E 8F                ld a, %10001111 ; blue with blue background to dont show win or loose when restart
 68   807A CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
 69   807D
 70   807D 21 C7 58             ld HL, $58C7
 71   8080 FD 21 C5 80          ld IY, input ; apunta a la lista de input, donde se almacenaran los colores introducidos por el jugador para el intento actual
 72   8084 16 00                ld d, 0 ; d actuara como flag. se establecera a 0 cuando no haya ninguna tecla pulsada y a 1 cuando se pulse una tecla. impedira que se lea una segunda tecla antes de soltar la primera
 73   8086 DD 21 B3 80          ld IX, seq ; apunta a la lista que contiene todos los colores introducibles, descartando el azul por ser el fondo
 74   808A
 75   808A C3 D5 80     pre_b2: jp key_x ; simula la pulsacion de la tecla 'X'. esto es para forzar la inicializacion de la secuencia de colores, que contiene como primer elemento un delimitador que debe ser ignorado
 76   808D
 77   808D              loop2: ; principal loop that reads the letters (Z, X, C) to control the game ( <-, ->, enter)
 78   808D 01 FE FE             ld bc, $FEFE
 79   8090 ED 78                in a,(c)
 80   8092 E6 1F                and %00011111 ; ignore bits
 81   8094 FE 1F                cp %00011111
 82   8096 CA D0 80             jp z, off1 ; goes of if no key is pressed
 83   8099 CB 42                bit 0, d
 84   809B C2 8D 80             jp nz, loop2 ; if d is 1 it means theres a key pressed
 85   809E 7F                   ld a,a
 86   809F FE 1B                cp %11011
 87   80A1 CA D5 80             jp z, key_x ; detects x key
 88   80A4 7F                   ld a,a
 89   80A5 FE 1D                cp %11101
 90   80A7 CA F4 80             jp z, key_z ;  detects z key
 91   80AA 7F                   ld a,a
 92   80AB FE 17                cp %10111
 93   80AD CA 13 81             jp z, key_ent ;  detects v key
 94   80B0 C3 8D 80             jp loop2 ; if v is pressed goes back
 95   80B3
 96   80B3 00 88 8A 8B  seq: db 0, %10001000, %10001010, %10001011, %10001100, %10001101, %10001110, %10001111, 0 ; Secuencia de colores introducibles, excluye el azul
 96   80B7 8C 8D 8E 8F
 96   80BB 00
 97   80BC 00 88 8A 8B  seqCpy: db 0, %10001000, %10001010, %10001011, %10001100, %10001101, %10001110, %10001111, 0 ; Copia de la secuancia de colores usada para restablecerl la original, puesto que esta es editada durante un intento
 97   80C0 8C 8D 8E 8F
 97   80C4 00
 98   80C5 00 00 00 00  input: db 0, 0, 0, 0, 1 ; Lista donde se almacenan los colores introducidos por el jugador para el intento actual
 98   80C9 01
 99   80CA 08 0A 0B 0C  key: db %00001000, %00001010, %00001011, %00001100, 1 ; Lista donde se almacenan los colores de la clave
 99   80CE 01
100   80CF 00           trys: db 0 ; Lleva cuenta de la columna actual para mostrar la pantalla de "loss" si se llega a 10 intentos fallidos
101   80D0
102   80D0              off1: ; reestablece el valor de D a 0 al detectar ninguna tecla pulsada y vuelve al inicio del bucle
103   80D0 16 00                ld d, 0
104   80D2 C3 8D 80             jp loop2
105   80D5
106   80D5              key_x: ;  changes d to 1, meaning theres a key pressed, adds 1 to the sequence to go to the next color if the value is 1 means its beign use so goes to the next one
107   80D5 16 01                ld d, 1
108   80D7 DD 23                inc IX
109   80D9 DD 7E 00             ld a, (ix)
110   80DC FE 00                cp 0
111   80DE CA ED 80             jp z, res_x
112   80E1 DD 7E 00             ld a, (ix)
113   80E4 FE 01                cp 1
114   80E6 CA D5 80             jp z, key_x ;if finds the value 1 goes to the next color
115   80E9 77                   ld (HL), A
116   80EA C3 8D 80             jp loop2
117   80ED              res_x: ; goes back to to the beginning
118   80ED DD 21 B3 80          ld IX, seq
119   80F1 C3 D5 80             jp key_x
120   80F4
121   80F4              key_z: ; el funcionamiento es el mismo que key_x, pero en vez de avanzar en la secuencia, retrocede
122   80F4 16 01                ld d, 1
123   80F6 DD 2B                dec IX ; resta en vez de sumar
124   80F8 DD 7E 00             ld a, (ix)
125   80FB FE 00                cp 0
126   80FD CA 0C 81             jp z, res_z
127   8100 DD 7E 00             ld a, (ix)
128   8103 FE 01                cp 1
129   8105 CA F4 80             jp z, key_z
130   8108 77                   ld (HL), A
131   8109 C3 8D 80             jp loop2
132   810C              res_z:
133   810C DD 21 BB 80          ld IX, seq+8 ; vuelve al final de la secuencia de colores
134   8110 C3 F4 80             jp key_z
135   8113
136   8113              key_ent:
137   8113 16 01                ld d, 1 ; gives d the value of 1 to express that a key is being pressed
138   8115 3E 01                ld a, 1
139   8117 DD 77 00             ld (IX), a ; changes the value in sequence to 1 to and the color to the sequence
140   811A
141   811A 7E                   ld a, (HL)
142   811B E6 7F                and %01111111 ; removes the BLINK property
143   811D 77                   ld (HL), a
144   811E FD 77 00             ld (IY), a ; adds the color to the sequence
145   8121 FD 23                inc IY ; moves to the next value of the sequence
146   8123
147   8123 FD 7E 00             ld a, (IY) ; detects if is the end of the sequence, if the value is 1 is the end
148   8126 FE 01                cp 1
149   8128 CA 37 81             jp z, reset_line ; verifies the attempt
150   812B
151   812B C5                   push bc
152   812C 01 40 00             ld bc, $40 ; goes to the next dot
153   812F 09                   add HL, bc
154   8130 C1                   pop bc
155   8131 3E 8F                ld a, %10001111 ; gives the BLINK property to the dot
156   8133 77                   ld (HL), a
157   8134 C3 8A 80             jp pre_b2 ; waits for input
158   8137
159   8137              reset_line:
160   8137 C5                   push bc
161   8138 F5                   push af
162   8139 FD E5                push iy
163   813B CD B8 81             call comprob2 ; verifies the elemts of the list of input which match the code with out taking in care the position, prits the white X
164   813E CD 92 81             call comprob ; verifies the elemts of the list of input which match the code taking in care the position, prits the red X
165   8141
166   8141 01 00 01             ld bc, $100 ; aims to the arrow of the column
167   8144 B7 ED 42             sub HL, BC
168   8147 3E 0E                ld a, %00001110 ; takes out the BLINK prperty and change the color to yellow, meaning that column is done
169   8149 77                   ld (HL), a
170   814A
171   814A FD 21 CF 80          ld IY, trys ;
172   814E FD 34 00             inc (IY) ; adds 1 to the trys
173   8151 FD 7E 00             ld a, (IY)
174   8154 FE 0A                cp 10
175   8156 CA 64 82             jp z, loss ; if theres 10 trys starts the loss
176   8159 23                   inc HL
177   815A 23                   inc HL ; aims to the next arrow
178   815B 3E 8D                ld a, %10001101 ; gives it the BLINK property
179   815D 77                   ld (HL), a
180   815E 01 40 00             ld bc, $40 ; aims to the next dot and gives it the blink property
181   8161 09                   add HL, BC
182   8162 3E 8F                ld a, %10001111
183   8164 77                   ld (HL), a
184   8165 C1                   pop bc
185   8166 F1                   pop af
186   8167 FD E1                pop iy
187   8169 CD 6F 81             call reset_color ; resets the colors of the sequence
188   816C C3 8A 80             jp pre_b2 ; waits the input
189   816F
190   816F              reset_color: ;copy the colors from seqCpy to seq, to restart the sequence
191   816F C5                   push BC
192   8170 DD 21 B3 80          ld IX, seq
193   8174 FD 21 BC 80          ld IY, seqCpy
194   8178 06 09                ld B, 9
195   817A FD 4E 00     loop_c: ld c, (IY)
196   817D DD 71 00             ld (IX), c
197   8180 DD 23                inc IX
198   8182 FD 23                inc IY
199   8184 05                   dec B
200   8185 C2 7A 81             jp nz, loop_c
201   8188 FD 21 C5 80          ld IY, input
202   818C DD 21 B3 80          ld IX, seq
203   8190 C1                   pop BC
204   8191 C9                   ret
205   8192              comprob:  ;compares key and input to know how many red x needs to be printed, the prints it
206   8192 06 04                ld b, 4
207   8194 16 00                ld d, 0
208   8196 FD 21 C5 80          ld IY, input
209   819A DD 21 CA 80          ld IX, key
210   819E              loop:
211   819E FD 7E 00             ld a, (IY)
212   81A1 DD 4E 00             ld c, (IX)
213   81A4 BF B9                cp A, C
214   81A6 C2 AA 81             jp nz, no_match
215   81A9 14                   inc D
216   81AA              no_match:
217   81AA FD 23                inc IY
218   81AC DD 23                inc IX
219   81AE 05                   dec B
220   81AF C2 9E 81             jp nz, loop  ;now d have the number of red x
221   81B2 CD 07 82             call draw_reds
222   81B5 16 01                ld d, 1 ; give the value 1 to d that was the value before
223   81B7 C9                   ret
224   81B8
225   81B8              comprob2: ;compares the elements of key and input to know have many white x needs to be printed
226   81B8 06 04                ld b, 4
227   81BA 16 00                ld d, 0
228   81BC FD 21 C5 80          ld IY, input
229   81C0              loop2_1:
230   81C0 FD 7E 00             ld a, (IY)
231   81C3 DD 21 CA 80          ld IX, key
232   81C7 C5                   push BC
233   81C8 06 04                ld B, 4
234   81CA              loop2_2:
235   81CA DD 4E 00             ld c, (IX)
236   81CD BF B9                cp A, C
237   81CF C2 D3 81             jp nz, no_match2
238   81D2 14                   inc D
239   81D3              no_match2:
240   81D3 DD 23                inc IX
241   81D5 05                   dec B
242   81D6 C2 CA 81             jp nz, loop2_2
243   81D9 FD 23                inc IY
244   81DB C1                   pop BC
245   81DC 05                   dec b
246   81DD C2 C0 81             jp nz, loop2_1 ;now d have the number of white x
247   81E0 CD E6 81             call draw_whites
248   81E3 16 01                ld d, 1 ; give the value 1 to d that was the value before
249   81E5 C9                   ret
250   81E6
251   81E6              draw_whites: ; draw wites just remove the X that left over
252   81E6 44 4D                ld BC, HL
253   81E8 E5                   push HL ; saves hl to dont loose it
254   81E9 60 69                ld HL, BC
255   81EB 01 40 01             ld BC, $140
256   81EE 09                   add HL, BC ; aims to the last X in the column
257   81EF 01 40 00             ld BC, $40
258   81F2              loop_d:
259   81F2 7A                   ld A, d
260   81F3 FE 04                cp 4
261   81F5 CA 05 82             jp z, cero ; if d is 4 means it doesnt need to remove any X
262   81F8 3E 49                ld A, %01001001 ; gives Flash property to the one it removes
263   81FA 77                   ld (HL), A
264   81FB B7 ED 42             sub HL, BC
265   81FE 14                   inc D
266   81FF 7A                   ld A, D
267   8200 FE 04                cp 4
268   8202 C2 F2 81             jp nz, loop_d
269   8205 E1           cero:   pop HL
270   8206 C9                   ret
271   8207
272   8207              draw_reds: ; prints the red X and goes to the WIN phase if theres 4
273   8207 44 4D                ld BC, HL
274   8209 E5                   push HL ;saves hl to dont loose it
275   820A 60 69                ld HL, BC
276   820C 01 80 00             ld BC, $80
277   820F 09                   add HL, BC ; aims to the first X of the column
278   8210 01 40 00             ld BC, $40
279   8213 5A                   ld E, D
280   8214              loop_d2:
281   8214 7A                   ld A, d
282   8215 FE 00                cp 0 ; if theres 4 red X goes to the win phase directly
283   8217 CA 25 82             jp z, cero2
284   821A 3E 4A                ld A, %01001010
285   821C 77                   ld (HL), A ; prints red the X
286   821D 09                   add HL, BC
287   821E 15                   dec D
288   821F 7A                   ld A, D
289   8220 FE 00                cp 0
290   8222 C2 14 82             jp nz, loop_d2
291   8225 E1           cero2:  pop HL ; gives the original value of HL
292   8226 7B                   ld A, e
293   8227 FE 04                cp 4
294   8229 CA 2D 82             jp z, win ; goes to the win phase
295   822C C9                   ret
296   822D
297   822D              win: ; prints the victory screen
298   822D 06 00                ld B, 0
299   822F 0E 00                ld C, 0
300   8231 3E 8A                ld a, %10001010
301   8233 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
302   8236 0C                   inc C
303   8237 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
304   823A 0C                   inc C
305   823B CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
306   823E
307   823E 21 00 40             ld HL, $4000 ;aims at the top left corner
308   8241 E5 DD E1             ld IX, HL
309   8244 01 00 01             ld BC, $100
310   8247 CD 07 84             call print_W
311   824A DD E5 E1             ld HL,IX
312   824D 23                   inc HL
313   824E E5 DD E1             ld IX,HL
314   8251 CD 1F 84             call print_i
315   8254 DD E5 E1             ld HL,IX
316   8257 23                   inc HL
317   8258 E5 DD E1             ld IX,HL
318   825B CD 3D 84             call print_n
319   825E
320   825E
321   825E
322   825E 01 FE FE             ld BC, $FEFE
323   8261 C3 A9 82             jp loop_fin ; wait to restart
324   8264
325   8264              loss: ; prints the loss screen
326   8264
327   8264 06 00                ld B, 0
328   8266 0E 00                ld C, 0
329   8268 3E 8A                ld a, %10001010
330   826A CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
331   826D 0C                   inc C
332   826E CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
333   8271 0C                   inc C
334   8272 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
335   8275 0C                   inc C
336   8276 CD 77 85             call Pixel2YXC ; B=y (0-23), C=x(0-31), A=color(0-15)
337   8279
338   8279 21 00 40             ld HL, $4000 ; aims to the top left corner
339   827C E5 DD E1             ld IX, HL
340   827F 01 00 01             ld BC, $100
341   8282 CD 70 84             call print_L
342   8285 DD E5 E1             ld HL,IX
343   8288 23                   inc HL
344   8289 E5 DD E1             ld IX,HL
345   828C CD 84 84             call print_o
346   828F DD E5 E1             ld HL,IX
347   8292 23                   inc HL
348   8293 E5 DD E1             ld IX,HL
349   8296 CD D8 84             call print_s
350   8299 DD E5 E1             ld HL,IX
351   829C 23                   inc HL
352   829D E5 DD E1             ld IX,HL
353   82A0 CD D8 84             call print_s
354   82A3
355   82A3 01 FE FE             ld BC, $FEFE
356   82A6 C3 A9 82             jp loop_fin ; waits for the restart
357   82A9
358   82A9              loop_fin: ;waits to press v and then restarts the game
359   82A9 ED 78                in a, (c)
360   82AB CB 67                bit 4, A
361   82AD C2 A9 82             jp nz, loop_fin
362   82B0 CD 6F 81             call reset_color
363   82B3 FD 21 CF 80          ld IY, trys ;
364   82B7 FD 36 00 00          ld (IY),0
365   82BB C3 00 80             jp start
366   82BE
367   82BE 76                   halt
368   82BF
369   82BF              arrow: ; print the arrow with high definition
370   82BF 01 00 01             ld BC, $100
371   82C2 3E 18                ld A, %00011000
372   82C4 77                   ld (HL), A
373   82C5 09                   add HL,BC
374   82C6 3E 18                ld A, %00011000
375   82C8 77                   ld (HL), A
376   82C9 09                   add HL,BC
377   82CA 3E 18                ld A, %00011000
378   82CC 77                   ld (HL), A
379   82CD 09                   add HL,BC
380   82CE 3E 99                ld A, %10011001
381   82D0 77                   ld (HL), A
382   82D1 09                   add HL,BC
383   82D2 3E DB                ld A, %11011011
384   82D4 77                   ld (HL), A
385   82D5 09                   add HL,BC
386   82D6 3E 7E                ld A, %01111110
387   82D8 77                   ld (HL), A
388   82D9 09                   add HL,BC
389   82DA 3E 3C                ld A, %00111100
390   82DC 77                   ld (HL), A
391   82DD 09                   add HL,BC
392   82DE 3E 18                ld A, %00011000
393   82E0 77                   ld (HL), A
394   82E1 C9                   ret
395   82E2
396   82E2              xs:  ; dibuja una equis en el cuadrado al que apunta HL
397   82E2 01 00 07             ld BC, $700
398   82E5 3E C3                ld A, %11000011
399   82E7 77                   ld (HL), A
400   82E8 09                   add HL,BC
401   82E9 77                   ld (HL), A
402   82EA 3E E7                ld A, %11100111
403   82EC 01 00 06             ld BC, $600
404   82EF B7 ED 42             sub HL,BC
405   82F2 77                   ld (HL), A
406   82F3 01 00 05             ld BC, $500
407   82F6 09                   add HL,BC
408   82F7 77                   ld (HL), A
409   82F8 3E 7E                ld A, %01111110
410   82FA 01 00 04             ld BC,$400
411   82FD B7 ED 42             sub HL,BC
412   8300 77                   ld (HL), A
413   8301 01 00 03             ld BC,$300
414   8304 09                   add HL,BC
415   8305 77                   ld (HL), A
416   8306 3E 3C                ld A, %00111100
417   8308 01 00 02             ld BC,$200
418   830B B7 ED 42             sub HL,BC
419   830E 77                   ld (HL), A
420   830F 01 00 01             ld BC,$100
421   8312 09                   add HL,BC
422   8313 77                   ld (HL), A
423   8314 C9                   ret
424   8315
425   8315              punto:  ; dibuja un punto en el cuadrado al que apunta HL
426   8315 01 00 07             ld BC, $700
427   8318 3E 3C                ld A, %00111100
428   831A 77                   ld (HL), A
429   831B 09                   add HL,BC
430   831C 77                   ld (HL), A
431   831D 3E 7E                ld A, %01111110
432   831F 01 00 06             ld BC, $600
433   8322 B7 ED 42             sub HL,BC
434   8325 77                   ld (HL), A
435   8326 01 00 05             ld BC, $500
436   8329 09                   add HL,BC
437   832A 77                   ld (HL), A
438   832B 3E FF                ld A, %11111111
439   832D 01 00 04             ld BC,$400
440   8330 B7 ED 42             sub HL,BC
441   8333 77                   ld (HL), A
442   8334 01 00 03             ld BC,$300
443   8337 09                   add HL,BC
444   8338 77                   ld (HL), A
445   8339 3E FF                ld A, %11111111
446   833B 01 00 02             ld BC,$200
447   833E B7 ED 42             sub HL,BC
448   8341 77                   ld (HL), A
449   8342 01 00 01             ld BC,$100
450   8345 09                   add HL,BC
451   8346 77                   ld (HL), A
452   8347 C9                   ret
453   8348
454   8348              print_line1: ; prints 10 arrows in alternate squares in a row
455   8348 23                   inc HL
456   8349 23                   inc HL
457   834A 23                   inc HL
458   834B 23                   inc HL
459   834C
460   834C E5 DD E1             ld IX,HL
461   834F 01 02 00             ld BC,2
462   8352 11 0A 00             ld DE,10
463   8355 DD 23                inc IX
464   8357 DD E5 E1     loop3_1: ld HL,IX
465   835A 09                   add HL,BC
466   835B E5 DD E1             ld IX,HL
467   835E CD BF 82             call arrow
468   8361 01 02 00             ld BC,2
469   8364 1B                   dec DE
470   8365 7A                   ld A,D
471   8366 B3                   or E
472   8367 C2 57 83             jp nz, loop3_1
473   836A 11 0A 00             ld DE,10
474   836D C9                   ret
475   836E
476   836E              print_line2: ; imprime diez circulos en cuadrados alternos en una fila
477   836E 23                   inc HL
478   836F 23                   inc HL
479   8370 23                   inc HL
480   8371 23                   inc HL
481   8372
482   8372 E5 DD E1             ld IX,HL
483   8375 01 02 00             ld BC,2
484   8378 11 0A 00             ld DE,10
485   837B DD 23                inc IX
486   837D DD E5 E1     loop3_2: ld HL,IX
487   8380 09                   add HL,BC
488   8381 E5 DD E1             ld IX,HL
489   8384 CD 15 83             call punto
490   8387 01 02 00             ld BC,2
491   838A 1B                   dec DE
492   838B 7A                   ld A,D
493   838C B3                   or E
494   838D C2 7D 83             jp nz, loop3_2
495   8390 11 0A 00             ld DE,10
496   8393 C9                   ret
497   8394
498   8394              print_line3: ; imprime diez xs en cuadrados alternos en una fila
499   8394 23                   inc HL
500   8395 23                   inc HL
501   8396 23                   inc HL
502   8397 23                   inc HL
503   8398
504   8398 E5 DD E1             ld IX,HL
505   839B 01 02 00             ld BC,2
506   839E 11 0A 00             ld DE,10
507   83A1 DD 23                inc IX
508   83A3 DD E5 E1     loop3_3: ld HL,IX
509   83A6 09                   add HL,BC
510   83A7 E5 DD E1             ld IX,HL
511   83AA CD E2 82             call xs
512   83AD 01 02 00             ld BC,2
513   83B0 1B                   dec DE
514   83B1 7A                   ld A,D
515   83B2 B3                   or E
516   83B3 C2 A3 83             jp nz, loop3_3
517   83B6 11 0A 00             ld DE,10
518   83B9 C9                   ret
519   83BA
520   83BA              print_M: ; Draws a "M" where the HL aims
521   83BA 3E 63                ld A,%01100011
522   83BC 77                   ld (HL),A
523   83BD 3E 77                ld A,%01110111
524   83BF 09                   add HL,BC
525   83C0 77                   ld (HL),A
526   83C1 3E 7F                ld A,%01111111
527   83C3 09                   add HL,BC
528   83C4 77                   ld (HL),A
529   83C5 09                   add HL,BC
530   83C6 77                   ld (HL),A
531   83C7 3E 6B                ld A,%01101011
532   83C9 09                   add HL,BC
533   83CA 77                   ld (HL),A
534   83CB 3E 63                ld A,%01100011
535   83CD 09                   add HL,BC
536   83CE 77                   ld (HL),A
537   83CF 09                   add HL,BC
538   83D0 77                   ld (HL),A
539   83D1 C9                   ret
540   83D2              print_A:
541   83D2 09                   add HL,BC
542   83D3 3E 3C                ld A,%00111100 ; prints A
543   83D5 CD 59 85             call print_down
544   83D8 3E 06                ld A,%00000110
545   83DA CD 59 85             call print_down
546   83DD 3E 3E                ld A,%00111110
547   83DF CD 59 85             call print_down
548   83E2 3E 66                ld A,%01100110
549   83E4 CD 59 85             call print_down
550   83E7 3E 3B                ld A,%00111011
551   83E9 CD 59 85             call print_down
552   83EC C9                   ret
553   83ED
554   83ED              print_R:
555   83ED 3E D8                ld A,%11011000 ;Escribe r
556   83EF CD 59 85             call print_down
557   83F2 3E 6C                ld A,%01101100
558   83F4 CD 59 85             call print_down
559   83F7 3E 60                ld A,%01100000
560   83F9 CD 59 85             call print_down
561   83FC 3E 60                ld A,%01100000
562   83FE CD 59 85             call print_down
563   8401 3E F0                ld A,%11110000
564   8403 CD 59 85             call print_down
565   8406 C9                   ret
566   8407
567   8407              print_W: ; dibuja una 'W' mayuscula en el cuadrado al que apunta HL
568   8407 3E 63                ld A,%01100011
569   8409 09                   add HL,BC
570   840A 77                   ld (HL),A
571   840B 09                   add HL,BC
572   840C 77                   ld (HL),A
573   840D 09                   add HL,BC
574   840E 77                   ld (HL),A
575   840F 3E 6B                ld A,%01101011
576   8411 09                   add HL,BC
577   8412 77                   ld (HL),A
578   8413 3E 7F                ld A,%01111111
579   8415 09                   add HL,BC
580   8416 77                   ld (HL),A
581   8417 3E 77                ld A,%01110111
582   8419 09                   add HL,BC
583   841A 77                   ld (HL),A
584   841B 3E 63                ld A,%01100011
585   841D 77                   ld (HL),A
586   841E
587   841E C9                   ret
588   841F
589   841F              print_i: ; dibuja una 'i' en el cuadrado al que apunta HL
590   841F 3E 0C                ld A,%00001100 ;Escribe i
591   8421 77                   ld (HL),A
592   8422 3E 00                ld A,%00000000
593   8424 CD 59 85             call print_down
594   8427 3E 1C                ld A,%00011100
595   8429 CD 59 85             call print_down
596   842C 3E 0C                ld A,%00001100
597   842E CD 59 85             call print_down
598   8431 CD 59 85             call print_down
599   8434 CD 59 85             call print_down
600   8437 3E 1E                ld A,%00011110
601   8439 CD 59 85             call print_down
602   843C C9                   ret
603   843D
604   843D              print_n: ; dibuja una 'n' en el cuadrado al que apunta HL
605   843D 09                   add HL,BC
606   843E 3E 6C                ld A,%01101100 ;Escribe n
607   8440 CD 59 85             call print_down
608   8443 3E 33                ld A,%00110011
609   8445 CD 59 85             call print_down
610   8448 CD 59 85             call print_down
611   844B CD 59 85             call print_down
612   844E CD 59 85             call print_down
613   8451 C9                   ret
614   8452              print_D:
615   8452 3E 0E                ld A,%00001110 ;prints d
616   8454 77                   ld (HL),A
617   8455 3E 06                ld A,%00000110
618   8457 CD 59 85             call print_down
619   845A 3E 3E                ld A,%00111110
620   845C CD 59 85             call print_down
621   845F 3E 66                ld A,%01100110
622   8461 CD 59 85             call print_down
623   8464 CD 59 85             call print_down
624   8467 CD 59 85             call print_down
625   846A 3E 3B                ld A,%00111011
626   846C CD 59 85             call print_down
627   846F C9                   ret
628   8470
629   8470              print_L: ; dibuja una 'L' mayuscula en el cuadrado al que apunta HL
630   8470 3E 60                ld A,%01100000
631   8472 09                   add HL,BC
632   8473 77                   ld (HL),A
633   8474 09                   add HL,BC
634   8475 77                   ld (HL),A
635   8476 09                   add HL,BC
636   8477 77                   ld (HL),A
637   8478 09                   add HL,BC
638   8479 77                   ld (HL),A
639   847A 09                   add HL,BC
640   847B 77                   ld (HL),A
641   847C 3E 7F                ld A,%01111111
642   847E 09                   add HL,BC
643   847F 77                   ld (HL),A
644   8480 3E 7F                ld A,%01111111
645   8482 77                   ld (HL),A
646   8483 C9                   ret
647   8484
648   8484              print_o: ; dibuja una 'o' en el cuadrado al que apunta HL
649   8484 09                   add HL,BC
650   8485 3E 3E                ld A,%00111110 ;Escribe n
651   8487 CD 59 85             call print_down
652   848A 3E 63                ld A,%01100011
653   848C CD 59 85             call print_down
654   848F CD 59 85             call print_down
655   8492 CD 59 85             call print_down
656   8495 3E 3E                ld A,%00111110
657   8497 CD 59 85             call print_down
658   849A C9                   ret
659   849B
660   849B              print_e: ; dibuja una 'e' en el cuadrado al que apunta HL
661   849B 09                   add HL,BC
662   849C 3E 3C                ld A,%00111100 ;Escribe e
663   849E CD 59 85             call print_down
664   84A1 3E 66                ld A,%01100110
665   84A3 CD 59 85             call print_down
666   84A6 3E 7E                ld A,%01111110
667   84A8 CD 59 85             call print_down
668   84AB 3E 60                ld A,%01100000
669   84AD CD 59 85             call print_down
670   84B0 3E 3C                ld A,%00111100
671   84B2 CD 59 85             call print_down
672   84B5 C9                   ret
673   84B6
674   84B6              print_T:
675   84B6 3E 30                ld A,%00110000 ;Escribe t
676   84B8 77                   ld (HL), A
677   84B9 3E 30                ld A,%00110000
678   84BB CD 59 85             call print_down
679   84BE 3E 7C                ld A,%01111100
680   84C0 CD 59 85             call print_down
681   84C3 3E 30                ld A,%00110000
682   84C5 CD 59 85             call print_down
683   84C8 3E 30                ld A,%00110000
684   84CA CD 59 85             call print_down
685   84CD 3E 37                ld A,%00110111
686   84CF CD 59 85             call print_down
687   84D2 3E 1E                ld A,%00011110
688   84D4 CD 59 85             call print_down
689   84D7 C9                   ret
690   84D8
691   84D8              print_s: ; dibuja una 's' en el cuadrado al que apunta HL
692   84D8 09                   add HL,BC
693   84D9 3E 3E                ld A,%00111110 ;Escribe s
694   84DB CD 59 85             call print_down
695   84DE 3E 60                ld A,%01100000
696   84E0 CD 59 85             call print_down
697   84E3 3E 3E                ld A,%00111110
698   84E5 CD 59 85             call print_down
699   84E8 3E 03                ld A,%00000011
700   84EA CD 59 85             call print_down
701   84ED 3E 3E                ld A,%00111110
702   84EF CD 59 85             call print_down
703   84F2 C9                   ret
704   84F3
705   84F3              print_title: ; prints the title "MASTER MIND" where HL is aiming
706   84F3 E5 DD E1             ld IX,HL
707   84F6 01 00 01             ld BC,$100
708   84F9 CD BA 83             call print_M ; prints M
709   84FC DD E5 E1             ld HL,IX
710   84FF 23                   inc HL
711   8500 E5 DD E1             ld IX,HL
712   8503 CD D2 83             call print_A
713   8506 DD E5 E1             ld HL,IX
714   8509 23                   inc HL
715   850A E5 DD E1             ld IX,HL
716   850D CD D8 84             call print_s
717   8510 DD E5 E1             ld HL,IX
718   8513 23                   inc HL
719   8514 E5 DD E1             ld IX,HL
720   8517 CD B6 84             call print_T
721   851A DD E5 E1             ld HL,IX
722   851D 23                   inc HL
723   851E E5 DD E1             ld IX,HL
724   8521 CD 9B 84             call print_e ;Escribe e
725   8524 DD E5 E1             ld HL,IX
726   8527 23                   inc HL
727   8528 E5 DD E1             ld IX,HL
728   852B 09                   add HL,BC
729   852C CD ED 83             call print_R
730   852F DD E5 E1             ld HL,IX
731   8532 23                   inc HL
732   8533 23                   inc HL
733   8534 E5 DD E1             ld IX,HL
734   8537 CD BA 83             call print_M ;Escribe M
735   853A DD E5 E1             ld HL,IX
736   853D 23                   inc HL
737   853E E5 DD E1             ld IX,HL
738   8541 CD 1F 84             call print_i ;Escribe i
739   8544 DD E5 E1             ld HL,IX
740   8547 23                   inc HL
741   8548 E5 DD E1             ld IX,HL
742   854B CD 3D 84             call print_n ;Escribe n
743   854E DD E5 E1             ld HL,IX
744   8551 23                   inc HL
745   8552 E5 DD E1             ld IX,HL
746   8555 CD 52 84             call print_D
747   8558 C9                   ret
748   8559
749   8559
750   8559 09           print_down: add HL,BC ; adds 1 to HL in a row inside a specific square and assigns the value of A to define his design
751   855A 77                   ld (HL),A
752   855B C9                   ret
753   855C              PixelYXC: ; B=y (0-23), C=x(0-31), A=color(0-15)
754   855C                        ; HL = $5800 y*32 + x
755   855C                        ;This function will print a pixel given the x, y coordinates
756   855C F5                   push AF
757   855D D5                   push DE
758   855E E5                   push HL
759   855F
760   855F 26 00                ld h, 0
761   8561 68                   ld l, b
762   8562 29                   add hl, hl ;2*hl
763   8563 29                   add hl, hl
764   8564 29                   add hl, hl
765   8565 29                   add hl, hl
766   8566 29                   add hl, hl ;32*hl would be like y*32
767   8567
768   8567
769   8567 16 00                ld d, 0
770   8569 59                   ld e, c
771   856A 19                   add hl, de ; HL = 32*y + x
772   856B 11 00 58             ld de, $5800
773   856E 19                   add hl, de ; HL = %5800 + 32*y +x
774   856F
775   856F                      ;Now that we have the position we print the color
776   856F                      ;We muliply by the base 3 three times so that we have a*8
777   856F 87                   add a
778   8570 87                   add a
779   8571 87                   add a
780   8572 77                   ld (hl), a
781   8573
782   8573 E1                   pop HL
783   8574 D1                   pop DE
784   8575 F1                   pop AF
785   8576 C9                   ret
786   8577
787   8577              Pixel2YXC: ; B=y (0-23), C=x(0-31), A=color(%COLOR %BACKGROUND)
788   8577                        ; HL = $5800 y*32 + x
789   8577                        ;This function will print a pixel given the x, y coordinates
790   8577 F5                   push AF
791   8578 D5                   push DE
792   8579 E5                   push HL
793   857A
794   857A 26 00                ld h, 0
795   857C 68                   ld l, b
796   857D 29                   add hl, hl ;2*hl
797   857E 29                   add hl, hl
798   857F 29                   add hl, hl
799   8580 29                   add hl, hl
800   8581 29                   add hl, hl ;32*hl would be like y*32
801   8582
802   8582
803   8582 16 00                ld d, 0
804   8584 59                   ld e, c
805   8585 19                   add hl, de ; HL = 32*y + x
806   8586 11 00 58             ld de, $5800
807   8589 19                   add hl, de ; HL = %5800 + 32*y +x
808   858A
809   858A                      ;Now that we have the position we print the color
810   858A                      ;We muliply by the base 3 three times so that we have a*8
811   858A
812   858A 77                   ld (hl), a
813   858B
814   858B E1                   pop HL
815   858C D1                   pop DE
816   858D F1                   pop AF
817   858E C9                   ret
818   858F
819   858F
# file closed: C:\Users\USER\Documents\Github\Mastermind\mastermind.asm
